# bot.py
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime, timedelta
import database as db
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("üìã –í—Å–µ –∑–∞–¥–∞—á–∏"), KeyboardButton("üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton("üöÄ –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"), KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ó–∞–¥–∞—á–∞ / 2024-12-31 18:30`\n\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.", parse_mode='Markdown')
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ ConversationHandler
        return

    elif text == "üìã –í—Å–µ –∑–∞–¥–∞—á–∏":
        tasks = db.get_tasks(user_id, "all")
        await show_task_list(update, tasks, "–í—Å–µ –∑–∞–¥–∞—á–∏:")

    elif text == "üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        tasks = db.get_tasks(user_id, "today")
        await show_task_list(update, tasks, "–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")

    elif text == "üöÄ –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        tasks = db.get_tasks(user_id, "tomorrow")
        await show_task_list(update, tasks, "–ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:")

    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∂–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–º–µ—Ç–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        tasks = db.get_tasks(user_id, "all")
        done_tasks = [t for t in tasks if t[3] == 1]  # is_done == 1
        await show_task_list(update, done_tasks, "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")

    else:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        if " / " in text:
            parts = text.split(" / ", 1)
            task_text = parts[0].strip()
            due_date_str = parts[1].strip() if len(parts) > 1 else None

            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            due_date = None
            if due_date_str:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
                    due_date = datetime.strptime(due_date_str, '%Y-%m-%d %H:%M').strftime('%Y-%m-%d %H:%M')
                except ValueError:
                    await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
                    return

            db.add_task(user_id, task_text, due_date)
            reply_text = f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: *{task_text}*"
            if due_date:
                reply_text += f"\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {due_date}"
            await update.message.reply_text(reply_text, parse_mode='Markdown')
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ –¥–∞—Ç—ã
            db.add_task(user_id, text)
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: *{text}*", parse_mode='Markdown')

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
async def show_task_list(update, tasks, title):
    if not tasks:
        await update.message.reply_text("–ó–∞–¥–∞—á –Ω–µ—Ç.")
        return

    task_list = f"*{title}*\n\n"
    for task in tasks:
        task_id, task_text, due_date, is_done = task
        status = "‚úÖ" if is_done else "‚è≥"
        date_str = f" ({due_date})" if due_date else ""
        task_list += f"{status} {task_text}{date_str} [/done{task_id}] [/del{task_id}]\n"

    await update.message.reply_text(task_list, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —Å /done –∏ /del)
# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–¥–µ–ª–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ /done –∏ /del
async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text.startswith('/done'):
        try:
            task_id = int(text[5:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ /done123
            db.mark_task_done(task_id, user_id)
            await update.message.reply_text("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! ‚úÖ")
        except (ValueError, IndexError):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

    elif text.startswith('/del'):
        try:
            task_id = int(text[4:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ /del123
            db.delete_task(task_id, user_id)
            await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞! üóëÔ∏è")
        except (ValueError, IndexError):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Regex(r'^/(done|del)\d+'), handle_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()